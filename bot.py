from telethon import TelegramClient, events
from airtable_client import AirtableClient
from dotenv import load_dotenv
from telethon.tl.custom import Button
import os
import re
from datetime import datetime, timedelta
import asyncio
import requests

load_dotenv()

bot_memory = {}
cached_rates = {}

def normalize(text):
    return (
        text.lower()
        .replace("-", " ")
        .replace("_", " ")
        .replace("‚Äì", " ")
        .replace("‚Äî", " ")
        .replace("  ", " ")
        .strip()
    )

CURRENCY_SYNONYMS = {
    "¬£": ["–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paund", "paunda", "gbp", "GBP", "gb"],
    "BGN": ["–ª–≤", "–ª–µ–≤–∞", "lv", "lw", "BGN", "bgn"],
    "EU": ["–µ–≤—Ä–æ", "eur", "euro", "evro", "ewro", "EURO"],
    "USD": ["–¥–æ–ª–∞—Ä", "–¥–æ–ª–∞—Ä–∞", "usd", "dolar", "dolara", "USD"]
}

def get_currency_key(word):
    word = word.lower().strip()
    for key, synonyms in CURRENCY_SYNONYMS.items():
        if word in synonyms:
            return key
    return None

def get_cached_exchange_rate(from_currency, to_currency):
    if (from_currency, to_currency) not in cached_rates:
        rate = airtable.get_exchange_rate(from_currency, to_currency)
        if rate:
            cached_rates[(from_currency, to_currency)] = rate
    return cached_rates.get((from_currency, to_currency))

class AirtableClient:
    def __init__(self):
        self.exchange_rate_cache = {}

    def get_exchange_rate(self, from_currency, to_currency):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–∏ –∫–æ–¥–æ–≤–µ –Ω–∞ –≤–∞–ª—É—Ç–∏
        valid_currencies = ["GBP", "BGN", "USD", "EUR"]
        if from_currency not in valid_currencies or to_currency not in valid_currencies:
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥ –Ω–∞ –≤–∞–ª—É—Ç–∞: {from_currency} –∏–ª–∏ {to_currency}")
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫–µ—à–∏—Ä–∞–Ω–∏ –∫—É—Ä—Å–æ–≤–µ
        cache_key = f"{from_currency}_{to_currency}"
        if cache_key in self.exchange_rate_cache:
            cached_rate, timestamp = self.exchange_rate_cache[cache_key]
            if (datetime.utcnow() - timestamp).seconds < 3600:  # –ö–µ—à—ä—Ç –µ –≤–∞–ª–∏–¥–µ–Ω –∑–∞ 1 —á–∞—Å
                print(f"üì• –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –∫–µ—à–∏—Ä–∞–Ω –∫—É—Ä—Å: 1 {from_currency} ‚Üí {to_currency} = {cached_rate}")
                return cached_rate

        # –ê–∫–æ –Ω—è–º–∞ –∫–µ—à, –∏–∑–≤–ª–∏—á–∞–º–µ –∫—É—Ä—Å–∞ –æ—Ç API
        API_KEY = os.getenv("EXCHANGE_RATE_API_KEY")
        url = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/{from_currency}"

        try:
            response = requests.get(url)
            if response.status_code != 200:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞: status {response.status_code}")
                print("–°—ä—Ä–≤—ä—Ä –≤—ä—Ä–Ω–∞:", response.text)
                return None

            data = response.json()
            print("üìä –ü—ä–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç API:", data)
        except Exception as e:
            print(f"‚ùå –ò–∑–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å: {e}")
            return None

        if data.get("result") == "success":
            rate = data["conversion_rates"].get(to_currency)
            if rate:
                print(f"üìà –¢—ä—Ä—Å–µ–Ω –∫—É—Ä—Å: 1 {from_currency} ‚Üí {to_currency} = {rate}")
                # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–∞ –≤ –∫–µ—à–∞
                self.exchange_rate_cache[cache_key] = (rate, datetime.utcnow())
                return rate

        print("‚ùå –ì—Ä–µ—à–∫–∞: result != success –∏–ª–∏ –ª–∏–ø—Å–≤–∞ –≤–∞–ª—É—Ç–µ–Ω –∫—É—Ä—Å.")
        return None

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

client = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)
airtable = AirtableClient()
airtable.get_linked_accounts()

# –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–∏ –≤–∞–ª—É—Ç–∏
rate = airtable.get_exchange_rate("GBP", "BGN")
print(f"–ö—É—Ä—Å GBP ‚Üí BGN: {rate}")

# –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –≤–∞–ª—É—Ç–∞
rate = airtable.get_exchange_rate("INVALID", "BGN")
print(f"–ö—É—Ä—Å INVALID ‚Üí BGN: {rate}")

@client.on(events.NewMessage(pattern="/refresh"))
async def refresh_accounts(event):
    airtable.get_linked_accounts(force_refresh=True)
    await event.respond("üîÑ –ê–∫–∞—É–Ω—Ç–∏—Ç–µ —Å–∞ –æ–ø—Ä–µ—Å–Ω–µ–Ω–∏.")

async def refresh_accounts_periodically():
    while True:
        airtable.get_linked_accounts(force_refresh=True)
        print("üîÅ –ê–∫–∞—É–Ω—Ç–∏—Ç–µ —Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ä–µ—Å–Ω–µ–Ω–∏.")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç–∏

@client.on(events.NewMessage)
async def message_router(event):
    user_id = event.sender_id
    text = event.raw_text.strip()

    # –†–µ–≥—É–ª—è—Ä–µ–Ω –∏–∑—Ä–∞–∑ –∑–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏—è
    match = re.search(
        r'(\d+(?:[.,]\d{1,2})?)\s*([–∞-—èa-zA-Z.]+)\s+(?:–æ—Ç|ot)\s+(.+?)\s+(?:–∫—ä–º|kum|kym|kam)\s+(?:(–ª–≤|–ª–µ–≤–∞|leva|–µ–≤—Ä–æ|evro|EUR|eur|usd|USD|dolara|–¥–æ–ª–∞—Ä|–¥–æ–ª–∞—Ä–∞|–ø–∞—É–Ω–¥|paunda|paund|gbp|BGN|EUR|USD|GBP)\s+)?(.+)',
        text,
        re.IGNORECASE
    )
    if not match:
        return

    # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
    amount = float(match.group(1).replace(",", "."))
    currency_raw = match.group(2).strip()
    sender = match.group(3).strip()
    receiver_currency_raw = match.group(4)  # –ú–æ–∂–µ –¥–∞ –µ None
    receiver = match.group(5).strip()

    # –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–∏—Ç–µ
    currency_key = get_currency_key(currency_raw)
    if not currency_key:
        await event.reply("‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –≤–∞–ª—É—Ç–∞ –Ω–∞ –∏–∑–ø—Ä–∞—â–∞—á–∞.")
        return

    receiver_currency_key = get_currency_key(receiver_currency_raw) if receiver_currency_raw else currency_key
    if receiver_currency_raw and not receiver_currency_key:
        await event.reply("‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –≤–∞–ª—É—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç–∏
    linked_accounts = airtable.get_linked_accounts()
    sender_id = receiver_id = None
    sender_label = receiver_label = ""

    for norm, (label, record_id) in linked_accounts.items():
        if all(kw in norm for kw in normalize(sender).split()):
            sender_id = record_id
            sender_label = label
        if all(kw in norm for kw in normalize(receiver).split()):
            receiver_id = record_id
            receiver_label = label

    if not sender_id or not receiver_id:
        await event.reply("‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –æ—Ç–∫—Ä–∏—è –∏ –¥–≤–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏ –≤ –∞–∫–∞—É–Ω—Ç–∏—Ç–µ.")
        return

    # –ü—Ä–µ–≤–∞–ª—É—Ç–∏—Ä–∞–Ω–µ, –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    converted_amount = amount
    if currency_key != receiver_currency_key:
        rate = get_cached_exchange_rate(currency_key, receiver_currency_key)
        if not rate:
            await event.reply("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–µ–Ω –∫—É—Ä—Å.")
            return
        converted_amount = round(amount * rate, 2)

    # –ó–∞–ø–∏—Å –≤ Airtable
    out_record = {
        "DATE": datetime.now().isoformat(),
        "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [sender_id],
        f"OUT {currency_key.upper()}": -abs(amount),
        "STATUS": "Pending",
        "–í—ä–≤–µ–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞": f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()
    }
    in_record = {
        "DATE": datetime.now().isoformat(),
        "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [receiver_id],
        f"IN {receiver_currency_key.upper()}": abs(converted_amount),
        "STATUS": "Pending",
        "–í—ä–≤–µ–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞": f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()
    }

    out_result = airtable.add_record(out_record)
    in_result = airtable.add_record(in_record)

    if 'id' in out_result and 'id' in in_result:
        bot_memory[user_id] = {
            'last_airtable_ids': [out_result['id'], in_result['id']]
        }
        await event.reply(
            "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø—Ä–µ–≤–∞–ª—É—Ç–∏—Ä–∞–Ω–µ.",
            buttons=[
                [Button.inline("Pending", b"status_pending")],
                [Button.inline("Arrived", b"status_arrived")],
                [Button.inline("Blocked", b"status_blocked")]
            ]
        )
    else:
        await event.reply("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –≤ Airtable.")

@client.on(events.CallbackQuery(pattern=b"type_(out|in)_(.+)"))
async def handle_type_selection(event):
    user_id = event.sender_id
    match = event.pattern_match
    direction = match.group(1).decode("utf-8")
    tx_type = match.group(2).decode("utf-8").upper()

    memory = bot_memory.get(user_id)
    if not memory:
        await event.answer("‚õî –ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è.")
        return

    base = memory["base_data"]
    col_base = f"{tx_type} {base['currency'].upper()}"

    if direction == "out":
        memory["out_fields"] = {
            "DATE": base["date"],
            "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [base["sender_id"]],
            col_base: -abs(base["amount"]),
            "STATUS": "Pending",
            "–í—ä–≤–µ–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞": base["entered_by"]
        }
        memory["step"] = "await_in_type"
        await event.edit(
            "üìå –ò–∑–±–µ—Ä–∏ –í–ò–î –∑–∞ –∞–∫–∞—É–Ω—Ç–∞ —Å—ä—Å –∑–Ω–∞–∫ ‚úÖ (IN):",
            buttons=[
                [Button.inline("INCOME", b"type_in_income")],
                [Button.inline("OUTCOME", b"type_in_outcome")],
                [Button.inline("DEPOSIT", b"type_in_deposit")],
                [Button.inline("WITHDRAW", b"type_in_withdraw")],
            ]
        )

    elif direction == "in":
        out_currency = base["currency"]  # –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ –≤–∞–ª—É—Ç–∞ –æ—Ç –∏–∑–ø—Ä–∞—â–∞—á–∞
        in_currency = base["receiver_currency"] # –≤–∞–ª—É—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        converted_amount = base["amount"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ–≤–∞–ª—É—Ç–∏—Ä–∞–º–µ
        if out_currency != in_currency:
            # –ò–∑–≤–ª–∏—á–∞–º–µ –∫—É—Ä—Å–∞ –æ—Ç airtable_client
            rate = get_cached_exchange_rate(out_currency, in_currency)
            if not rate:
                await event.edit("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª—É—Ç–µ–Ω –∫—É—Ä—Å.")
                return
            # –∏–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—É–º–∞—Ç–∞ –ø–æ –Ω–æ–≤–∏—è –∫—É—Ä—Å
            converted_amount = round(base["amount"] * rate, 2)

        # –∑–∞–ø–∏—Å–≤–∞–º–µ –≤—Ö–æ–¥—è—â–∏—è —Ä–µ–¥ –≤ Airtable —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–∞—Ç–∞ –≤–∞–ª—É—Ç–∞
        memory["in_fields"] = {
            "DATE": base["date"],
            "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [base["receiver_id"]],
            f"{tx_type} {in_currency.upper()}": abs(converted_amount),
            "STATUS": "Pending",
            "–í—ä–≤–µ–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞": base["entered_by"]
        }

        # –∑–∞–ø–∏—Å–≤–∞–º–µ –∏–∑—Ö–æ–¥—è—â–∏—è –∏ –≤—Ö–æ–¥—è—â–∏—è —Ä–µ–¥
        out_result = airtable.add_record(memory["out_fields"])
        in_result = airtable.add_record(memory["in_fields"])

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∑–∞–ø–∏—Å—ä—Ç –µ —É—Å–ø–µ—à–µ–Ω
        if 'id' in out_result and 'id' in in_result:
            bot_memory[user_id] = {
                'last_airtable_ids': [out_result['id'], in_result['id']]
            }
            await event.edit(
                "‚úÖ –í—ä–≤–µ–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –ø—Ä–µ–≤–∞–ª—É—Ç–∏—Ä–∞–Ω–µ. üìå –ò–∑–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:",
                buttons=[
                    [Button.inline("Pending", b"status_pending")],
                    [Button.inline("Arrived", b"status_arrived")],
                    [Button.inline("Blocked", b"status_blocked")]
                ]
            )
        else:
            await event.edit("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å.")

@client.on(events.CallbackQuery(pattern=b"delete_([0-9]+)"))
async def handle_delete_button(event):
    user_id = event.sender_id
    index = int(event.pattern_match.group(1)) - 1
    records = bot_memory.get(user_id, {}).get("deletable_records", [])
    if index < 0 or index >= len(records):
        await event.answer("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∑–∞–ø–∏—Å.", alert=True)
        return
    record = records[index]
    record_id = record["id"]
    note = record["fields"].get("NOTES", "‚Äî")
    success = airtable.delete_record(record_id)
    if success:
        await event.edit(f"üóëÔ∏è –ó–∞–ø–∏—Å—ä—Ç ‚Äû{note}‚Äú –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ.")
    else:
        await event.edit("‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ—Ç–æ.")
    bot_memory[user_id]["deletable_records"] = []

@client.on(events.CallbackQuery(pattern=b'status_(pending|arrived|blocked)'))
async def handle_status_selection(event):
    status_value = event.pattern_match.group(1).decode("utf-8").capitalize()
    user_id = event.sender_id
    last_ids = bot_memory.get(user_id, {}).get('last_airtable_ids', [])

    if not last_ids:
        await event.answer("‚ùå –ù—è–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ.", alert=True)
        return

    for record_id in last_ids:
        airtable.update_status(record_id, status_value)

    await event.edit(f"üìå –°—Ç–∞—Ç—É—Å—ä—Ç –µ –∑–∞–¥–∞–¥–µ–Ω –Ω–∞: {status_value}")

loop = asyncio.get_event_loop()
loop.create_task(refresh_accounts_periodically())
client.run_until_disconnected()