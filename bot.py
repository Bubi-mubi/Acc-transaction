from telethon import TelegramClient, events
from airtable_client import AirtableClient, find_matching_account
from dotenv import load_dotenv
import os
import datetime

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

client = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)
airtable = AirtableClient()

@client.on(events.NewMessage(pattern=r'^–î–æ–±–∞–≤–∏:'))
async def handler(event):
    try:
        text = event.raw_text.replace("–î–æ–±–∞–≤–∏:", "").strip()
        parts = [p.strip() for p in text.split("|")]

        # üîç –í–∑–∏–º–∞–º–µ –∞–∫–∞—É–Ω—Ç–∏ –∏ —Ç—ä—Ä—Å–∏–º –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
        linked_accounts = airtable.get_linked_accounts()
        record_id = find_matching_account(parts[1], linked_accounts)

        if not record_id:
            await event.reply("‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –æ—Ç–∫—Ä–∏—è –∞–∫–∞—É–Ω—Ç–∞ –ø–æ –ø–æ–¥–∞–¥–µ–Ω–∏—Ç–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏.")
            return

        # ‚úÖ –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –∑–∞–ø–∏—Å
        fields = {
            "DATE": datetime.datetime.strptime(parts[0], "%d.%m.%Y").date().isoformat(),
            "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [record_id],
            "INCOME ¬£": float(parts[2]),
            "OUTCOME ¬£": float(parts[3]),
            "DEPOSIT ¬£": float(parts[4]),
            "WITHDRAW ¬£": float(parts[5]),
            "INCOME BGN": float(parts[6]),
            "OUTCOME BGN": float(parts[7]),
            "DEPOSIT BGN": float(parts[8]),
            "WITHDRAW BGN": float(parts[9]),
            "STATUS": parts[10],
            "–ß–ò–ò –ü–ê–†–ò": parts[11],
            "NOTES": parts[12] if len(parts) > 12 else ""
        }

        result = airtable.add_record(fields)
        print("Airtable Response:", result)
        if 'id' in result:
            await event.reply("‚úÖ –ó–∞–ø–∏—Å—ä—Ç –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ Airtable!")
        else:
            await event.reply(f"‚ö†Ô∏è Airtable –Ω–µ –ø—Ä–∏–µ –∑–∞—è–≤–∫–∞—Ç–∞:\n{result}")

    except Exception as e:
        await event.reply(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {e}")

client.run_until_disconnected()
