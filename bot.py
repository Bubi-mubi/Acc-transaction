from telethon import TelegramClient, events
from airtable_client import AirtableClient
from dotenv import load_dotenv
from telethon.tl.custom import Button
import os
import datetime
import re

load_dotenv()

# –ü–∞–º–µ—Ç –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
bot_memory = {}

CURRENCY_SYNONYMS = {
    "¬£": ["–ø–∞—É–Ω–¥", "–ø–∞—É–Ω–¥–∞", "paund", "paunda", "gbp", "gb"],
    "BGN": ["–ª–≤", "–ª–µ–≤–∞", "lv", "lw"],
    "EU": ["–µ–≤—Ä–æ", "eur", "euro", "evro", "ewro"],
    "USD": ["–¥–æ–ª–∞—Ä", "–¥–æ–ª–∞—Ä–∞", "usd", "dolar", "dolara"]
}

def get_currency_key(word):
    word = word.lower().strip()
    for key, synonyms in CURRENCY_SYNONYMS.items():
        if word in synonyms:
            return key
    return None

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

client = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)
airtable = AirtableClient()

@client.on(events.NewMessage(pattern=r'^–î–æ–±–∞–≤–∏:'))
async def handler(event):
    try:
        text = event.raw_text.replace("–î–æ–±–∞–≤–∏:", "").strip()
        parts = [p.strip() for p in text.split("|")]

        # üîç –í–∑–∏–º–∞–º–µ –∞–∫–∞—É–Ω—Ç–∏ –∏ —Ç—ä—Ä—Å–∏–º –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
        linked_accounts = airtable.get_linked_accounts()
        record_id = find_matching_account(parts[1], linked_accounts)

        print("üîé –ö–ª—é—á–æ–≤–∏ –¥—É–º–∏:", parts[1])
        print("üì¶ –ó–∞—Ä–µ–¥–µ–Ω–∏ –∞–∫–∞—É–Ω—Ç–∏ –æ—Ç Airtable:")
        for norm, (full, rid) in linked_accounts.items():
            print(f"- {full} ‚ûú {rid} (–Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–æ: {norm})")

        if not record_id:
            await event.reply("‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –æ—Ç–∫—Ä–∏—è –∞–∫–∞—É–Ω—Ç–∞ –ø–æ –ø–æ–¥–∞–¥–µ–Ω–∏—Ç–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏.")
            return

        # ‚úÖ –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –∑–∞–ø–∏—Å
        fields = {
            "DATE": event.message.date.date().isoformat(),
            "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [record_id],
            "INCOME ¬£": float(parts[2]),
            "OUTCOME ¬£": float(parts[3]),
            "DEPOSIT ¬£": float(parts[4]),
            "WITHDRAW ¬£": float(parts[5]),
            "INCOME BGN": float(parts[6]),
            "OUTCOME BGN": float(parts[7]),
            "DEPOSIT BGN": float(parts[8]),
            "WITHDRAW BGN": float(parts[9]),
            "STATUS": parts[10],
            "–ß–ò–ò –ü–ê–†–ò": parts[11],
            "NOTES": parts[12] if len(parts) > 12 else ""
        }

        result = airtable.add_record(fields)
        print("Airtable Response:", result)
        if 'id' in result:
            await event.reply("‚úÖ –ó–∞–ø–∏—Å—ä—Ç –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ Airtable!")
        else:
            await event.reply(f"‚ö†Ô∏è Airtable –Ω–µ –ø—Ä–∏–µ –∑–∞—è–≤–∫–∞—Ç–∞:\n{result}")

    except Exception as e:
        await event.reply(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {e}")

# üí¨ –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –∏–∑—Ä–µ—á–µ–Ω–∏–µ –∫–∞—Ç–æ: "100 –ø–∞—É–Ω–¥–∞ –æ—Ç X –∫—ä–º Y"
@client.on(events.NewMessage)
async def smart_input_handler(event):
    match = re.search(
        r'(\d+(?:[.,]\d{1,2})?)\s*([–∞-—èa-zA-Z.]+)\s+(?:–æ—Ç|ot)\s+(.+?)\s+(?:–∫—ä–º|kum|kym)\s+(.+)',
        event.raw_text,
        re.IGNORECASE
    )
    if not match:
        print("‚ùå –ù–µ —Å—ä–≤–ø–∞–¥–∞ —Å —à–∞–±–ª–æ–Ω–∞:", event.raw_text)
        return

    amount = float(match.group(1).replace(",", "."))
    currency_raw = match.group(2).strip()
    sender = match.group(3).strip()
    receiver = match.group(4).strip()

    currency_key = get_currency_key(currency_raw)

    if not currency_key:
        await event.reply("‚ùå –ù–µ –º–æ–≥–∞ –¥–∞ —Ä–∞–∑–±–µ—Ä–∞ –≤–∞–ª—É—Ç–∞—Ç–∞. –ú–æ–ª—è, –∏–∑–ø–æ–ª–∑–≤–∞–π: –ª–≤, lv, –ø–∞—É–Ω–¥, eur, –¥–æ–ª–∞—Ä –∏ —Ç.–Ω.")
        return

    user_id = event.sender_id
    bot_memory[user_id] = {
        "amount": amount,
        "currency": currency_key,
        "sender": sender,
        "receiver": receiver,
        "date": event.message.date.date().isoformat()
    }

    await event.respond(
        f"üìå –†–∞–∑–ø–æ–∑–Ω–∞—Ö: {amount} {currency_key} –æ—Ç *{sender}* –∫—ä–º *{receiver}*.\n–ö–∞–∫—ä–≤ –µ –≤–∏–¥—ä—Ç –Ω–∞ –ø–ª–∞—â–∞–Ω–µ—Ç–æ?",
        buttons=[
            [Button.inline("INCOME", b"income"), Button.inline("OUTCOME", b"outcome")],
            [Button.inline("DEPOSIT", b"deposit"), Button.inline("WITHDRAW", b"withdraw")]
        ]
    )
    
# üëÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ç–∏–ø –ø–ª–∞—â–∞–Ω–µ
@client.on(events.CallbackQuery)
async def button_handler(event):
    user_id = event.sender_id
    if user_id not in bot_memory:
        await event.answer("‚ùå –ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è.")
        return

    action = event.data.decode("utf-8").upper()
    payment = bot_memory.pop(user_id)

    # üóÇÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ –∫–æ–ª–æ–Ω–∞—Ç–∞ —Å–ø–æ—Ä–µ–¥ –≤–∞–ª—É—Ç–∞—Ç–∞
    col_base = f"{action} {payment['currency']}"  # –Ω–∞–ø—Ä. INCOME BGN

    # –í–∑–∏–º–∞–º–µ –∞–∫–∞—É–Ω—Ç–∏—Ç–µ –æ—Ç Airtable
    linked_accounts = airtable.get_linked_accounts()
    print("üîÅ –¢—ä—Ä—Å—è –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏:")
    print("üîç Sender:", payment["sender"])
    print("üîç Receiver:", payment["receiver"])
    print("üì¶ Linked accounts:")
    for norm, (full, id_) in linked_accounts.items():
        print(f"‚û°Ô∏è {norm} ‚Üí {full} ({id_})")

    print("üì¶ NORMALIZED REG –æ—Ç Airtable:")
    for norm, (original, rid) in linked_accounts.items():
        print(f"- {norm}  ‚Üí  {original}")

    # üîç –¢—ä—Ä—Å–∏–º –∞–∫–∞—É–Ω—Ç–∏ —á—Ä–µ–∑ –º–µ—Ç–æ–¥–∞ –æ—Ç –∫–ª–∞—Å–∞ AirtableClient
    sender_id = receiver_id = None
    sender_label = receiver_label = ""

    for norm, (label, record_id) in linked_accounts.items():
        if all(kw in norm for kw in normalize(payment['sender']).split()):
            sender_id = record_id
            sender_label = label
        if all(kw in norm for kw in normalize(payment['receiver']).split()):
            receiver_id = record_id
            receiver_label = label

    if not sender_id or not receiver_id:
        await event.edit("‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –æ—Ç–∫—Ä–∏—è –∏ –¥–≤–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏ –≤ –∞–∫–∞—É–Ω—Ç–∏—Ç–µ.")
        return

    # ‚ùå OUT –∑–∞–ø–∏—Å (–æ—Ç sender)
    out_fields = {
        "DATE": payment["date"],
        "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [sender_id],
        col_base: -abs(payment["amount"]),  # –≤–∏–Ω–∞–≥–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–æ
        "STATUS": "Pending",
        "–ß–ò–ò –ü–ê–†–ò": "–§–ò–†–ú–ê",
        "NOTES": f"{sender_label} ‚û°Ô∏è {receiver_label}"
    }

    # ‚úÖ IN –∑–∞–ø–∏—Å (–≤ receiver)
    in_fields = {
        "DATE": payment["date"],
        "–ë–ê–ù–ö–ê/–ë–£–ö–ò": [receiver_id],
        col_base: abs(payment["amount"]),
        "STATUS": "Pending",
        "–ß–ò–ò –ü–ê–†–ò": "–§–ò–†–ú–ê",
        "NOTES": f"{sender_label} ‚û°Ô∏è {receiver_label}"
    }

    # –ó–∞–ø–∏—Å–≤–∞–º–µ –∏ –¥–≤–∞—Ç–∞ —Ä–µ–¥–∞
    out_result = airtable.add_record(out_fields)
    in_result = airtable.add_record(in_fields)

    if 'id' in out_result and 'id' in in_result:
       await event.edit(
    f"‚úÖ –î–≤–∞ –∑–∞–ø–∏—Å–∞ –±—è—Ö–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ:\n\n‚ùå - {sender_label}\n‚úÖ + {receiver_label}"
)
    else:
        await event.edit(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å:\nOUT: {out_result}\nIN: {in_result}")

client.run_until_disconnected()
