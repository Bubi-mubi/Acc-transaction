import os
import requests
import difflib

def normalize(text):
    return (
        text.lower()
        .replace("-", " ")
        .replace("_", " ")
        .replace("‚Äì", " ")
        .replace("‚Äî", " ")
        .replace("  ", " ")
        .strip()
    )

class AirtableClient:
    def __init__(self):
        self.token = os.getenv("AIRTABLE_PAT")
        self.base_id = os.getenv("AIRTABLE_BASE_ID")
        self.table_name = os.getenv("AIRTABLE_TABLE_NAME")
        self.endpoint = f"https://api.airtable.com/v0/{self.base_id}/{self.table_name}"
        self.base_url = f"https://api.airtable.com/v0/{self.base_id}"
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }
        self.cached_accounts = None  # –ö–µ—à–∏—Ä–∞–Ω —Å–ø–∏—Å—ä–∫ —Å –∞–∫–∞—É–Ω—Ç–∏

    def get_exchange_rate(self, from_currency, to_currency):
        API_KEY = os.getenv("EXCHANGE_RATE_API_KEY")
        url = f"https://v6.exchangerate-api.com/v6/{API_KEY}/latest/{from_currency}"

        try:
            response = requests.get(url)
            if response.status_code != 200:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞: status {response.status_code}")
                print("–°—ä—Ä–≤—ä—Ä –≤—ä—Ä–Ω–∞:", response.text)
                return None

            data = response.json()
            print("üìä –ü—ä–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç API:", data)
        except Exception as e:
            print(f"‚ùå –ò–∑–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å: {e}")
            print("–û—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞:", response.text if response else "(–Ω—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä)")
            return None

        if data.get("result") == "success":
            rate = data["conversion_rates"].get(to_currency)
            if rate:
                print(f"üìà –¢—ä—Ä—Å–µ–Ω –∫—É—Ä—Å: 1 {from_currency} ‚Üí {to_currency} = {rate}")
                return rate

        print("‚ùå –ì—Ä–µ—à–∫–∞: result != success –∏–ª–∏ –ª–∏–ø—Å–≤–∞ –≤–∞–ª—É—Ç–µ–Ω –∫—É—Ä—Å.")
        return None  # ‚¨ÖÔ∏è –ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç —Ä–µ–¥ –≤ get_exchange_rate()

    def update_notes(self, record_id, note):  # ‚¨ÖÔ∏è –Ω–∞–ø—ä–ª–Ω–æ –æ—Ç–¥–µ–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, —Å—ä—Å —Å—ä—â–∏—è –æ—Ç—Å—Ç—ä–ø –∫–∞—Ç–æ –≤—Å–∏—á–∫–∏ –º–µ—Ç–æ–¥–∏
        url = f"{self.base_url}/{self.table_name}/{record_id}"
        data = {
            "fields": {
                "NOTES": note
            }
        }

        response = requests.patch(url, json=data, headers=self.headers, params={"typecast": "true"})
        print(f"üìù –û–±–Ω–æ–≤–µ–Ω NOTES –∑–∞ {record_id}: {response.status_code} ‚Äì {response.text}")

        if response.status_code != 200:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ NOTES –∑–∞ {record_id}: {response.text}")



    def get_linked_accounts(self, force_refresh=False):
        if hasattr(self, 'cached_accounts') and self.cached_accounts and not force_refresh:
            return self.cached_accounts

        url = f"https://api.airtable.com/v0/{self.base_id}/–í–°–ò–ß–ö–ò%20–ê–ö–ê–£–ù–¢–ò"
        mapping = {}
        offset = None

        while True:
            full_url = url
            if offset:
                full_url += f"?offset={offset}"

            response = requests.get(full_url, headers=self.headers)
            data = response.json()

            for record in data.get("records", []):
                full_name = record["fields"].get("REG")
                if full_name:
                    normalized = normalize(full_name)
                    mapping[normalized] = (full_name, record["id"])

            offset = data.get("offset")
            if not offset:
                break

        self.cached_accounts = mapping
        return self.cached_accounts


    def find_matching_account(self, user_input, account_dict=None):
        if account_dict is None:
            account_dict = self.get_linked_accounts()

        user_input_norm = normalize(user_input)
        print(f"\nüîç –¢—ä—Ä—Å–∏–º fuzzy: '{user_input}' ‚Üí '{user_input_norm}'")

        possible_matches = list(account_dict.keys())
        best = difflib.get_close_matches(user_input_norm, possible_matches, n=1, cutoff=0.5)

        if best:
            matched_key = best[0]
            original, record_id = account_dict[matched_key]
            print(f"‚úÖ –ù–∞–π-–±–ª–∏–∑—ä–∫ fuzzy match: {original} ({record_id})")
            return record_id

        print("‚ùå –ù—è–º–∞ –±–ª–∏–∑–∫–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ.")
        return None

    def add_record(self, fields: dict):
        data = {"fields": fields}
        response = requests.post(self.endpoint, headers=self.headers, json=data)
        return response.json()

    def update_status(self, record_id, status):
        print(f"‚û°Ô∏è –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å: {record_id} —Å—ä—Å STATUS: {status}")

        url = f"{self.base_url}/{self.table_name}/{record_id}"
        data = {
            "fields": {
                "STATUS": status
            }
        }

        response = requests.patch(url, json=data, headers=self.headers, params={"typecast": "true"})

        print("‚¨ÖÔ∏è –û—Ç–≥–æ–≤–æ—Ä –æ—Ç Airtable:", response.status_code, response.text)

        if response.status_code != 200:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ {record_id}: {response.text}")

        from datetime import datetime, timedelta

    def get_recent_user_records(self, user_filter_text, within_minutes=60):
        now = datetime.utcnow()
        cutoff = now - timedelta(minutes=within_minutes)
        cutoff_iso = cutoff.isoformat()

        filter_formula = f"AND(IS_AFTER(DATE, '{cutoff_iso}'), FIND('{user_filter_text}', {{NOTES}}))"
        url = f"{self.endpoint}?filterByFormula={filter_formula}"

        response = requests.get(url, headers=self.headers)
        data = response.json()

        return data.get("records", [])

    def delete_record(self, record_id):
        url = f"{self.base_url}/{self.table_name}/{record_id}"
        response = requests.delete(url, headers=self.headers)
        print(f"üóëÔ∏è –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å {record_id}: {response.status_code}")
        return response.status_code == 200

